#| echo: TRUE
round(100*prop.table(table(mpg$drv)))
100*prop.table(table(mpg$drv))
#| echo: TRUE
round(100*prop.table(table(mpg$drv)))
ggpiestats(mpg,
drv,
ratio = c(0.45, 0.45, 0.1),
package = "RColorBrewer",
palette = "Set2")+
theme_bw(base_size = 15)
#| echo: TRUE
#| fig-width: 15
#| fig-height: 8
gghistostats(mpg, cty,
test.value = 16,
bin.args = list(color = "black",
fill = "cyan")) +
theme_classic(base_size = 15)
pbinom(0.59, 1000)
dbinom(c(0:1000), 1000, 0.59)
df <- data.frame(x = c(0:1000),
prob = dbinom(c(0:1000), 1000, 0.59)
plot(df$x, df$prob, type = "l", col = "blue", lwd = 2,
plot(df$x, df$prob, type = "l", col = "blue", lwd = 2,
xlab = "Number of heads", ylab = "Probability",
main = "Binomial distribution with n = 1000 and p = 0.59")
plot(df$x, df$prob)
df <- data.frame(x = c(0:1000),
prob = dbinom(c(0:1000), 1000, 0.59)
)
plot(df$x, df$prob)
max_prob <- max(df$prob)
max_prob_x <- df$x[df$prob == max_prob]
max_prob
max_prob_x
install.packages("svglite")
library(svglite)
talbe(mtcars$vs, mtcats$am)
table(mtcars$vs, mtcars$am)
obs_freq <- c(17, 27, 10, 28, 18)
chisq.test(obs_freq)
exp_freq <- c(15, 30, 10, 30, 15)
chisq.test(obs_freq, exp_freq)
chisq.test(obs_freq, exp_freq, rescale.p = TRUE)
chisq.test(obs_freq, p = exp_freq, rescale.p = TRUE)
library(ggstatsplot)
df <- data.frame(weekday = c(17, 27, 10, 28, 18))
df %>%
ggpiestats(weekday,
ratio = c(0.15, 0.3, 0.1, 0.3, 0.15),
package = "RColorBrewer",
palette = "Set2")+
theme_bw(base_size = 15)
library(tidyverse)
df %>%
ggpiestats(weekday,
ratio = c(0.15, 0.3, 0.1, 0.3, 0.15),
package = "RColorBrewer",
palette = "Set2")+
theme_bw(base_size = 15)
df <- data.frame(id = 1:100,
weekday = c(rep("Mon", 17),
rep("Tue", 27),
rep("Wed", 10),
rep("Thu", 28),
rep("Fri", 18),))
df <- data.frame(id = 1:100,
weekday = c(rep("Mon", 17),
rep("Tue", 27),
rep("Wed", 10),
rep("Thu", 28),
rep("Fri", 18)))
df %>%
ggpiestats(weekday,
ratio = c(0.15, 0.3, 0.1, 0.3, 0.15),
package = "RColorBrewer",
palette = "Set2")+
theme_bw(base_size = 15)
df %>%
ggpiestats(weekday,
ratio = c(0.15, 0.3, 0.1, 0.3, 0.15),
package = "RColorBrewer",
palette = "Set2")+
theme_bw(base_size = 12)
library(RColorBrewer)
display.brewer.all()
df %>%
ggpiestats(weekday,
ratio = c(0.15, 0.3, 0.1, 0.3, 0.15),
package = "RColorBrewer",
palette = "Set3")+
theme_bw(base_size = 12)
chisq.test(obs_freq, p = exp_freq, rescale.p = TRUE)
chisq.test(obs_freq, p = exp_freq, rescale.p = TRUE) %>%
str()
chisq.test(obs_freq, p = exp_freq, rescale.p = TRUE) %>%
attributes()
# 例题9.3
# 创建数据矩阵
sales_data <- matrix(c(52, 64, 24, 60, 59, 52, 50, 65, 74),
nrow = 3,
byrow = TRUE)
colnames(sales_data) <- c("一级", "二级", "三级")
# 打印矩阵查看结果
print(sales_data)
chisq.test(sales_data)
chisq.test(sales_data)$expected
chisq.test(sales_data) %>% str()
chisq.test(sales_data) %>% str()
chisq.test(sales_data)$expected
install.packages("RcmdrMisc")
library(RcmdrMisc)
rowPercents(sales_data)
sales <- matrix(c(52, 64, 24, 60, 59, 52, 50, 65, 74),
nrow = 3,
byrow = TRUE)
rownames(sales) <- c("甲地区", "乙地区", "丙地区")
colnames(sales) <- c("一级", "二级", "三级")
chisq.test(sales)
chisq.test(sales) %>% str()
chisq.test(sales)$expected
rowPercents(sales)
rowsum(sales)
sales %>% as.table()
sales %>% as.table() %>%
prop.table()
sales %>% as.table() %>%
prop.table(1)
#计算百分比
sales %>%
prop.table()
sales %>%
prop.table(1)
sales %>%
prop.table(2)
sales %>%
ggbarstats()
sales
library(reshape2)
melt(sales, varnames = c("地区", "等级"))
sales_df <- melt(sales, varnames = c("地区", "等级"))
sales_df %>%
ggbarstats(地区，
sales_df %>%
ggbarstats(地区,
等级)
library(tidyverse)
library(ggstatsplot)
sales_df %>%
ggbarstats(地区,
等级)
library(showtext)
sales_df %>%
ggbarstats(地区,
等级)
rep(row.names(sales_df), sales_df$value)
sales_df[rep(row.names(sales_df), sales_df$value),
c("地区", "等级")]
regions <- rownames(sales)
region <- rownames(sales)
grade <- colnames(sales)
grid <- expand.grid(region = rownames(sales),
grade = colnames(sales))
grid
grid[1,]
rep(grid[1, ], 52)
rep(grid[1, ], 52)
data.frame(rep(grid[1, ], 52))
repeated_grid <- grid[rep(seq_len(nrow(grid)), sales), ]
repeated_grid
sales_df <- data.frame(
地区 = rep(rownames(sales), each = ncol(sales)),
等级 = rep(colnames(sales), times = nrow(sales)),
销售 = as.vector(sales)
)
sales_df
expanded_sales <- sales_df[rep(seq_len(nrow(sales_df)),
sales_df$销售),
c("地区", "等级")]
expanded_sales
ggbarstats(mpg,
drv,
cyl,
package = "RColorBrewer",
palette = "Paired")+
theme_bw(base_size = 15)
melt(sales)
melt(sales, varnames = c("area", "grade"))
chisq.test(mpg$drv, mpg$cyl)
mpg %>%
table(drv, cyl)
table(mpg$drv, mpg$cyl)
table(mpg$drv, mpg$cyl) %>%
chisq.test()
table(mpg$drv, mpg$cyl) %>%
fisher.test()
table(mpg$drv, mpg$cyl) %>%
chisq.test(simulate.p.value = TRUE)
table(mpg$cyl)
mpg %>%
mutate(new_cyl = fct_collapse(cyl,
4_5 = c(4, 5)))
mpg %>%
mutate(new_cyl = fct_collapse(cyl,
"4_5" = c(4, 5)))
fct_collapse(cyl,
"4_5" = c(4, 5))
fct_collapse(mpg$cyl,
"4_5" = c(4, 5)
mpg %>%
mpg %>%
mutate(new_cyl = fct_collapse(mpg$cyl,
"4_5" = c(4, 5)))
mpg %>%
filter(cyl != 5)
df <- mpg %>%
filter(cyl != 5)
table(df$drv, df$cyl) %>%
chisq.test()
library(readxl)
例10_1 <- read_excel("例10.1.xlsx")
View(例10_1)
eg10_1 <- read_excel("例10.1.xlsx")
eg10_1
pivot_longer(
eg10_1,
cols = everything(),  # 或指定列名 c(零售业, 旅游业, 航空公司, 家电制造业)
names_to = "industry",  # 新的列名，用于存放原来的列名（行业名称）
values_to = "value"  # 新的列名，用于存放对应的值
)
pivot_longer(
eg10_1,
#cols = everything(),  # 或指定列名 c(零售业, 旅游业, 航空公司, 家电制造业)
names_to = "industry",  # 新的列名，用于存放原来的列名（行业名称）
values_to = "value"  # 新的列名，用于存放对应的值
)
eg10_1_df <- pivot_longer(
eg10_1,
cols = everything(),  # 或指定列名 c(零售业, 旅游业, 航空公司, 家电制造业)
names_to = "industry",  # 新的列名，用于存放原来的列名（行业名称）
values_to = "value"  # 新的列名，用于存放对应的值
)
eg10_1_df
pivot_longer(
eg10_1,
cols = everything(),  # 或指定列名 c(零售业, 旅游业, 航空公司, 家电制造业)
names_to = "industry",  # 新的列名，用于存放原来的列名（行业名称）
values_to = "value"  # 新的列名，用于存放对应的值
) %>%
na.omit()
eg10_1_df <- pivot_longer(
eg10_1,
cols = everything(),  # 或指定列名 c(零售业, 旅游业, 航空公司, 家电制造业)
names_to = "industry",  # 新的列名，用于存放原来的列名（行业名称）
values_to = "value"  # 新的列名，用于存放对应的值
) %>%
na.omit()
eg10_1_df %>%
aov(value ~ industry, data = .)
eg10_1_df %>%
aov(value ~ industry, data = .) %>%
summary
eg10_1_df %>%
ggbetweenstats(industry, value)
eg10_1,
eg10_1_df
eg10_1_df %>%
ggbetweenstats(industry, value)
ggbetweenstats(industry,
value,
violin.args = list(width = 0))
eg10_1_df %>%
ggbetweenstats(industry,
value,
violin.args = list(width = 0))
eg10_1_df %>%
ggbetweenstats(industry,
value,
violin.args = list(width = 0))
library(showtext)
showtext_auto()
eg10_1_df %>%
ggbetweenstats(industry,
value,
violin.args = list(width = 0))
mpg %>%
mutate(trans = ifelse(substr(trans) == "auto",
"automatic",
"manual"))
mpg %>%
mutate(trans = ifelse(substr(trans, 1, 4) == "auto",
"automatic",
"manual"))
mpg %>%
mutate(trans = ifelse(substr(trans, 1, 4) == "auto",
"automatic",
"manual")) %>%
anov(cty ~ trans + drv, data = .)
mpg %>%
mutate(trans = ifelse(substr(trans, 1, 4) == "auto",
"automatic",
"manual")) %>%
aov(cty ~ trans + drv, data = .)
source("~/Documents/teaching/stat24/code9_10_11.R", echo=TRUE)
mpg %>%
mutate(trans = ifelse(substr(trans, 1, 4) == "auto",
"automatic",
"manual")) %>%
aov(cty ~ trans + drv, data = .) %>%
summary()
mpg %>%
mutate(trans = ifelse(substr(trans, 1, 4) == "auto",
"automatic",
"manual")) %>%
aov(cty ~ trans + drv + trans:drv, data = .) %>%
summary()
cor(mtcars)
data(mtcars)
cor(mpg)
mpg %>%
select(is.numeric)
mpg %>%
select_if(is.numeric)
mpg %>%
select_if(is.numeric())
mpg %>%
select_if(is.numeric)
mpg %>%
select_if(is.numeric) %>%
cor()
install.packages("corrplot")
mpg %>%
select_if(is.numeric) %>%
cor() %>%
round(3)
library(corrplot)
mpg %>%
select_if(is.numeric) %>%
cor() %>%
round(3) %>%
corrplot()
mpg %>%
select_if(is.numeric) %>%
cor() %>%
round(3) %>%
corrplot(addCoef.col = "white")
mpg %>%
select_if(is.numeric) %>%
cor() %>%
round(3) %>%
corrplot(addCoef.col = "white",
number.cex = 0.8)
mpg %>%
select_if(is.numeric) %>%
cor() %>%
round(3) %>%
corrplot(addCoef.col = "white",
number.cex = 0.8,
number.digits = 3)
mpg %>%
select_if(is.numeric) %>%
cor() %>%
round(3) %>%
corrplot(addCoef.col = "white",
number.cex = 0.8,
number.digits = 3,
tl.cex = 0.8)
mpg %>%
select_if(is.numeric) %>%
cor() %>%
round(3) %>%
corrplot(addCoef.col = "white",
number.cex = 0.8,
number.digits = 3,
tl.cex = 0.8,
cl.length = 10)
mpg %>%
select_if(is.numeric) %>%
cor() %>%
round(3) %>%
corrplot(addCoef.col = "white",
number.cex = 0.8,
number.digits = 3,
tl.cex = 0.8,
cl.length = 11)
mtcars
mtcars %>%
cor() %>%
round(3) %>%
corrplot(addCoef.col = "white",
number.cex = 0.8,
number.digits = 3,
tl.cex = 0.8,
cl.length = 11)
mpg %>%
select_if(is.numeric) %>%
cor() %>%
round(3) %>%
corrplot(addCoef.col = "white",
number.cex = 0.8,
number.digits = 3,
tl.cex = 0.8,
cl.length = 11,
type = "upper")
# chap 11 regression ------------------------------------------------------
data(mpg)
lm(mpg$cty ~ mpg$displ)
lm(mpg$cty ~ mpg$displ) %>% summary()
mpg %>%
lm(cty ~ displ, data = .)
lm(mpg$cty[cyl == 4] ~ mpg$displ[cyl == 4]) %>% summary()
lm(mpg$cty[mpg$cyl == 4] ~ mpg$displ[mgp$cyl == 4]) %>% summary()
lm(mpg$cty[mpg$cyl == 4] ~ mpg$displ[mpg$cyl == 4]) %>% summary()
install.packages("ggpubr")
library(ggpubr)
mpg %>%
ggscatter(displ, cty)
mpg %>%
ggscatter("displ", "cty")
mpg %>%
ggscatter("displ", "cty",
add = "loess",
color = "red")
mpg %>%
ggscatter("displ", "cty",
add = "loess",
color = "red") +
stat_regline_equation(formula = "cty ~ displ")
mpg %>%
ggscatter("displ", "cty",
add = "loess",
color = "red") +
stat_regline_equation(formula = cty ~ displ)
mpg %>%
ggscatter("displ", "cty",
add = "loess",
color = "red") +
stat_regline_equation(formula = "cty" ~ "displ")
mpg %>%
ggscatter("displ", "cty",
add = "loess",
color = "red") +
stat_regline_equation(formula = cty ~ poly(displ,1))
mpg %>%
ggscatter("displ", "cty",
add = "loess",
color = "red") +
stat_regline_equation(formula = mpg$cty ~ poly(displ,1))
mpg %>%
ggscatter("displ", "cty",
add = "loess",
color = "red") +
stat_regline_equation(formula = mpg$cty ~ poly(mgp$displ,1))
mpg %>%
ggscatter("displ", "cty",
add = "loess",
color = "red") +
stat_regline_equation(formula = mpg$cty ~ poly(mpg$displ,1))
mpg %>%
ggscatter("displ", "cty",
add = "reg.line",
color = "red")
mpg %>%
ggscatter("displ", "cty",
add = "reg.line",
color = "red") +
stat_regline_equation(formula = mpg$cty ~ poly(mpg$displ,1))
mpg %>%
ggscatter("displ", "cty",
add = "reg.line",
color = "red") +
stat_regline_equation(formula = cty ~ displ)
mpg %>%
ggscatter("displ", "cty",
add = "reg.line",
color = "red") +
stat_regline_equation(formula = mpg$cty ~ mpg$displ,
aes(label =  paste(..eq.label..,
..adj.rr.label..,
sep = "~~~~")))
mpg %>%
ggscatter("displ", "cty",
add = "reg.line",
color = "red") +
stat_regline_equation(formula = mpg$cty ~ mpg$displ,
aes(label =  paste(after_stat(eq.label),
..adj.rr.label..,
sep = "~~~~")))
mpg %>%
lm(cty ~ displ, data = .)
mpg %>%
ggplot(aes(displ, cty)) +
geom_point() +
geom_smooth(method = "lm")
mpg %>%
ggplot(aes(displ, cty, color = as.factor(cyl))) +
geom_point() +
geom_smooth(method = "lm")
mpg %>%
ggscatter("displ", "cty",
add = "reg.line",
color = "red") +
stat_regline_equation(formula = mpg$cty ~ poly(mpg$displ,1))
mpg %>%
ggscatter("displ", "cty",
add = "reg.line",
color = "red") +
stat_regline_equation(formula = mpg$cty ~ mpg$displ,
aes(label =  paste(after_stat(eq.label),
..adj.rr.label..,
sep = "~~~~")))
